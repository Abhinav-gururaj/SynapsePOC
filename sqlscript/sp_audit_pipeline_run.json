{
	"name": "sp_audit_pipeline_run",
	"properties": {
		"content": {
			"query": "DROP PROC [metadata].[sp_audit_pipeline_run]\nGO\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE PROC [metadata].[sp_audit_pipeline_run] @p_pipeline_run_id [varchar](40),@p_pipeline_master_run_id [varchar](40),@p_pipeline_name [varchar](255),@p_pipeline_status [varchar](40),@p_pipeline_start_dttm [datetime],@p_pipeline_end_dttm [datetime],@p_user [varchar](40) AS\n    /* ---------------------------------------------*/\n    /* display parameters                           */\n    /* ---------------------------------------------*/        \n    print ''; -- char(10)\n    print 'Parameters Captured:'\n    print '- pipeline_run_id       : ' + coalesce(cast(@p_pipeline_run_id as varchar), 'null');\n    print '- pipeline_master_run_id: ' + coalesce(cast(@p_pipeline_master_run_id as varchar), 'null');\n    print '- pipeline_name         : ' + coalesce(cast(@p_pipeline_name as varchar), 'null');\n    print '- pipeline_status       : ' + coalesce(cast(@p_pipeline_status as varchar), 'null');\n    print '- pipeline_start_dttm   : ' + coalesce(convert(varchar(19),@p_pipeline_start_dttm, 20), 'null');\n    print '- pipeline_end_dttm     : ' + coalesce(convert(varchar(19),@p_pipeline_end_dttm, 20), 'null');\n    print '- user                  : ' + coalesce(cast(@p_user as varchar), 'null');\n    print ''; -- char(10)\n\n    /* ---------------------------------------------*/\n    /* declare variables                            */\n    /* ---------------------------------------------*/\n    declare @v_id                     bigint,       -- for capturing existing id\n            @v_pipeline_run_id varchar(40),         -- for capturing existing pipeline_run_id\n            @v_pipeline_master_run_id varchar(40),  -- for capturing existing pipeline_master_run_id\n            @v_pipeline_name          varchar(255), -- for capturing existing pipeline_name\n            @v_pipeline_status        varchar(40),  -- for capturing existing pipeline_status\n            @v_pipeline_end_dttm      datetime,     -- for capturing existing pipeline_end_datetime\n            @v_pipeline_entry_count   int           -- for capturing existing pipeline_entry_count\n    ;\n\tdeclare @id bigint\n\tselect @id=coalesce(max(id),0)+1 from metadata.audit_pipeline_run\n    /* ---------------------------------------------*/\n    /* set parameter defaults                       */\n    /* ---------------------------------------------*/\n    if @p_pipeline_start_dttm is null\n        set @p_pipeline_start_dttm = current_timestamp;\n\n    if @p_pipeline_end_dttm is null\n        set @p_pipeline_end_dttm = current_timestamp;\n\n    /* ---------------------------------------------*/\n    /* capture existing record                      */\n    /* ---------------------------------------------*/\n    select \n        @v_id = id,\n        @v_pipeline_run_id = pipeline_run_id,\n        @v_pipeline_master_run_id = pipeline_master_run_id,\n        @v_pipeline_name = pipeline_name,\n        @v_pipeline_status = pipeline_status,\n        @v_pipeline_end_dttm = pipeline_end_datetime,\n        @v_pipeline_entry_count = pipeline_entry_count\n    from\n        ( select\n              id,\n              pipeline_run_id,\n              pipeline_master_run_id,  \n              pipeline_name, \n              pipeline_status, \n              pipeline_end_datetime, \n              pipeline_entry_count,\n              rank() over (partition by pipeline_run_id order by id desc) as rnk\n          from metadata.audit_pipeline_run\n          where\n              pipeline_run_id = @p_pipeline_run_id\n              and pipeline_master_run_id = @p_pipeline_master_run_id\n        ) t1\n    where rnk = 1\n    ;\n    \n    if @v_pipeline_run_id is not null\n        begin    \n            print 'Existing Record Found:'\n            print '- pipeline_run_id       : ' + coalesce(cast(@v_pipeline_run_id as varchar), 'null');\n            print '- pipeline_master_run_id: ' + coalesce(cast(@v_pipeline_master_run_id as varchar), 'null');\n            print '- pipeline_name         : ' + coalesce(cast(@v_pipeline_name as varchar), 'null');\n            print '- pipeline_status       : ' + coalesce(cast(@v_pipeline_status as varchar), 'null');\n            print '- pipeline_entry_count  : ' + coalesce(cast(@v_pipeline_entry_count as varchar), 'null');\n            print ''; -- char(10)\n        end\n\n    /* ---------------------------------------------*/\n    /* check parameters                             */\n    /* ---------------------------------------------*/\n    declare @v_error_flag bit = 0;\n    declare @v_error_message varchar(1000) = '';\n\n    -- check p_pipeline_run_id is not null\n    if @p_pipeline_run_id is null\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Pipeline run id must be provided as a parameter.'\n        end\n\n    -- check p_pipeline_master_run_id is not null\n    if @p_pipeline_master_run_id is null\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Master pipeline run id must be provided as a parameter.'\n        end\n\n    -- check p_pipeline_name is not null\n    if @p_pipeline_name is null\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Pipeline name must be provided as a parameter.'\n        end\n\n    -- check p_pipeline_status is not null\n    if @p_pipeline_status is null\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Pipeline status must be provided as a parameter.'\n        end\n\n    -- check p_pipeline_status is 'running', 'rerunning', 'failed', 'complete'\n    if @p_pipeline_status not in ('running', 'rerunning', 'failed', 'complete')\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Parameter for status must be \"running\", \"rerunning\", \"failed\", or \"complete\".'\n        end\n\n    -- check p_user is not null\n    if @p_user is null\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: User must be provided as a parameter.'\n        end\n\n    -- check master pipeline run id found in master table\n    declare @v_master_id bigint\n    select @v_master_id = id from metadata.audit_pipeline_run where pipeline_master_run_id = @p_pipeline_master_run_id;\n    if @v_master_id is null\n        begin\n            set @v_error_flag = 1\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Master pipeline id \"' + @p_pipeline_master_run_id + '\" not found in master pipeline table.'\n        end\n\n    -- if existing record not found\n    if @v_pipeline_run_id is null\n        begin\n            -- check p_pipeline_status is 'running'\n            if @p_pipeline_status != 'running'\n                begin\n                    set @v_error_flag = 1\n                    set @v_error_message = @v_error_message + char(10) + 'ERROR: Status must be \"running\" when initializing a pipeline run.'\n                end\n        end\n\n    -- if existing record found\n    else\n        begin\n            -- check existing record pipeline_master_run_id matches p_pipeline_master_run_id\n            if @p_pipeline_master_run_id != @v_pipeline_master_run_id\n                begin\n                    set @v_error_flag = 1\n                    set @v_error_message = @v_error_message + char(10) + 'ERROR: Parameter is for master run id \"' + @p_pipeline_master_run_id + '\", but existing master pipeline record is for run id \"' + @v_pipeline_master_run_id + '\".'\n                end\n\n            -- check existing record pipeline_name matches p_pipeline_name\n            if @p_pipeline_name != @v_pipeline_name\n                begin\n                    set @v_error_flag = 1\n                    set @v_error_message = @v_error_message + char(10) + 'ERROR: Parameter is for pipeline \"' + @p_pipeline_name + '\", but existing record is for pipeline \"' + @v_pipeline_name + '\".'\n                end\n        end\n\n    -- check if error encountered\n    if @v_error_flag = 1\n        begin\n            set @v_error_message = @v_error_message + char(10) + 'ERROR: Invalid parameters provided.';\n            throw 51000, @v_error_message, 1\n        end\n\n    /* ---------------------------------------------*/\n    /* main processing                              */\n    /* ---------------------------------------------*/\n\n    -- if existing record not found\n    if @v_pipeline_run_id is null\n        begin\n            insert into metadata.audit_pipeline_run (\n\t\t\t\tid,\n                pipeline_run_id,\n                pipeline_master_run_id,\n                pipeline_name,\n                pipeline_status,\n                pipeline_entry_count,\n                pipeline_start_datetime,\n                pipeline_end_datetime,\n                md_insert_datetime,\n                md_insert_user,\n                md_update_datetime,\n                md_update_user\n            ) values (\n\t\t\t\t@id,\n                @p_pipeline_run_id,\n                @p_pipeline_master_run_id,\n                @p_pipeline_name,\n                'running',\n                1,\n                @p_pipeline_start_dttm,\n                null,\n                CURRENT_TIMESTAMP,\n                @p_user,\n                CURRENT_TIMESTAMP,\n                @p_user\n            );\n        end\n    \n    -- if existing record found\n    else\n        begin\n            -- if new status is running|rerunning and previous status is complete|failed, insert new record and iterate pipeline entry count\n            if @p_pipeline_status in ('running', 'rerunning') and @v_pipeline_status in ('complete', 'failed')\n                begin\n\t\t\t\t\t\n                    insert into metadata.audit_pipeline_run (\n\t\t\t\t\t\tid,\n                        pipeline_run_id,\n                        pipeline_master_run_id,\n                        pipeline_name,\n                        pipeline_status,\n                        pipeline_entry_count,\n                        pipeline_start_datetime,\n                        pipeline_end_datetime,\n                        md_insert_datetime,\n                        md_insert_user,\n                        md_update_datetime,\n                        md_update_user\n                    ) values (\n\t\t\t\t\t\t@id,\n                        @p_pipeline_run_id,\n                        @p_pipeline_master_run_id,\n                        @p_pipeline_name,\n                        'rerunning',\n                        @v_pipeline_entry_count + 1,\n                        @p_pipeline_start_dttm,\n                        null,\n                        CURRENT_TIMESTAMP,\n                        @p_user,\n                        CURRENT_TIMESTAMP,\n                        @p_user\n                    );\n                end\n            else\n                begin\n                    -- set pipeline end datetime \n                    if @p_pipeline_status in ('complete', 'failed')\n                        set @v_pipeline_end_dttm = @p_pipeline_end_dttm\n\n                    -- update existing record\n                    update metadata.audit_pipeline_run set\n                        pipeline_status = @p_pipeline_status,\n                        pipeline_end_datetime = @v_pipeline_end_dttm,\n                        md_update_datetime = current_timestamp,\n                        md_update_user = @p_user\n                    where \n                        id = @v_id\n                    ;\n                end\n        end\n\n    select coalesce(max(id),0) from metadata.audit_pipeline_run -- return identity of last affected row\nGO",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "mydedicatedsqlpool",
				"poolName": "mydedicatedsqlpool"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}